# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _arma_numpy_test
else:
    import _arma_numpy_test

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def sum_vec(*args):
    return _arma_numpy_test.sum_vec(*args)

def get_vec(size):
    return _arma_numpy_test.get_vec(size)

def reverse_vec(*args):
    return _arma_numpy_test.reverse_vec(*args)

def sum_vec_by_ref(v):
    return _arma_numpy_test.sum_vec_by_ref(v)

def sum_vec_by_ptr(v):
    return _arma_numpy_test.sum_vec_by_ptr(v)

def sum_mat(*args):
    return _arma_numpy_test.sum_mat(*args)

def transpose_mat(m):
    return _arma_numpy_test.transpose_mat(m)

def set_to_zero_by_ref(*args):
    return _arma_numpy_test.set_to_zero_by_ref(*args)

def set_to_zero_by_ptr(*args):
    return _arma_numpy_test.set_to_zero_by_ptr(*args)

def sum_mat_by_const_ref(m):
    return _arma_numpy_test.sum_mat_by_const_ref(m)

def sum_mat_by_const_ptr(m):
    return _arma_numpy_test.sum_mat_by_const_ptr(m)

def sum_cube(*args):
    return _arma_numpy_test.sum_cube(*args)

def do_nothing(c):
    return _arma_numpy_test.do_nothing(c)

def get_second_slice(c):
    return _arma_numpy_test.get_second_slice(c)

def print_memptr_by_val(*args):
    return _arma_numpy_test.print_memptr_by_val(*args)

def print_memptr_by_ref(*args):
    return _arma_numpy_test.print_memptr_by_ref(*args)

def print_memptr_by_ptr(*args):
    return _arma_numpy_test.print_memptr_by_ptr(*args)

def print_memptr_by_const_ref(*args):
    return _arma_numpy_test.print_memptr_by_const_ref(*args)

def print_memptr_by_const_ptr(*args):
    return _arma_numpy_test.print_memptr_by_const_ptr(*args)


