- Allow upcasting vec->matrix->cube, and also downcasting if dimensions agree (i.e. (1,3) matrix, or (1,4,1) cube, etc.)
- Test wrapping of a class (implement a simple 1D grid of 3-vecs?)
- Return by pointer illegal, but reference should have Numpy use the data but not steal a reference.
    - This is needed to allow things like:
        //-- C++ --//
        struct MyClass{
            arma::vec _my_vec;
            arma::vec& access_my_vec(){ return _my_vec;}
        };
        //-- Python --//
        myclass = MyClass()
        myclass.access_my_vec() = np.zeros(3)
- Return by unique_ptr or shared_ptr? Former should steal a reference, latter will be tricky to work with.
- More compatibility tests (i.e. actually check that Arma uses int64_t by default).
